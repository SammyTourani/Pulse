{
  "name": "create_email_draft",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-brick/create_email_draft",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "create-email-draft-webhook"
    },
    {
      "parameters": {
        "workflowId": "brick_auth_guard"
      },
      "id": "call-auth-guard",
      "name": "Call Auth Guard",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare data for validation sub-workflow\nconst inputData = $input.all()[0].json;\n\nreturn {\n  json: {\n    brickName: 'create_email_draft',\n    inputData: inputData.body || inputData,\n    originalInput: inputData.body || inputData,\n    headers: inputData.headers || {}\n  }\n};"
      },
      "id": "prepare-validation",
      "name": "Prepare Validation Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "workflowId": "brick_validate"
      },
      "id": "call-validate",
      "name": "Call Validate",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare business logic with enhanced validation\nconst inputData = $input.all()[0].json;\nconst validatedInput = inputData.originalInput;\n\n// Additional email address format validation and input sanitization\nfunction validateAndSanitizeEmail(email) {\n  if (!email || typeof email !== 'string') {\n    throw new Error('Email address is required and must be a string');\n  }\n  \n  // Trim whitespace\n  email = email.trim();\n  \n  // Enhanced email validation regex\n  const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n  \n  if (!emailRegex.test(email)) {\n    throw new Error('Invalid email address format');\n  }\n  \n  // Check for common security issues\n  if (email.includes('<script') || email.includes('javascript:')) {\n    throw new Error('Email address contains invalid characters');\n  }\n  \n  return email.toLowerCase();\n}\n\n// Sanitize text inputs\nfunction sanitizeText(text) {\n  if (!text || typeof text !== 'string') {\n    return text;\n  }\n  \n  // Remove potential XSS attempts\n  return text\n    .replace(/<script[^>]*>.*?<\\/script>/gis, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '')\n    .trim();\n}\n\ntry {\n  // Validate and sanitize inputs\n  const sanitizedTo = validateAndSanitizeEmail(validatedInput.to);\n  const sanitizedSubject = sanitizeText(validatedInput.subject);\n  const sanitizedBody = sanitizeText(validatedInput.body);\n  \n  // Additional validation\n  if (!sanitizedSubject || sanitizedSubject.length === 0) {\n    throw new Error('Subject cannot be empty');\n  }\n  \n  if (!sanitizedBody || sanitizedBody.length === 0) {\n    throw new Error('Body cannot be empty');\n  }\n  \n  if (sanitizedSubject.length > 998) { // RFC 5322 limit\n    throw new Error('Subject line too long (max 998 characters)');\n  }\n  \n  // Prepare for Gmail API call with sanitized data\n  return {\n    json: {\n      brickName: 'create_email_draft',\n      validatedInput: {\n        to: sanitizedTo,\n        subject: sanitizedSubject,\n        body: sanitizedBody\n      },\n      originalInput: inputData.originalInput,\n      to: sanitizedTo,\n      subject: sanitizedSubject,\n      body: sanitizedBody,\n      startTime: Date.now()\n    }\n  };\n  \n} catch (error) {\n  // Return validation error\n  return {\n    json: {\n      brickName: 'create_email_draft',\n      success: false,\n      error: 'Input validation failed: ' + error.message,\n      code: 'VALIDATION_ERROR',\n      httpStatus: 400,\n      originalInput: inputData.originalInput\n    }\n  };\n}"
      },
      "id": "prepare-business-logic",
      "name": "Prepare Business Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-failed",
              "leftValue": "={{ $json.success }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-error-branch",
      "name": "Validation Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format error response directly\nconst inputData = $input.all()[0].json;\nconst requestId = 'req_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n\nconst errorResponse = {\n  ok: false,\n  error: inputData.error || 'Validation failed',\n  code: inputData.code || 'VALIDATION_ERROR',\n  brick: 'create_email_draft',\n  timestamp: new Date().toISOString(),\n  requestId: requestId\n};\n\nreturn {\n  json: {\n    response: errorResponse,\n    httpStatus: inputData.httpStatus || 400\n  }\n};"
      },
      "id": "format-error-response",
      "name": "Format Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 120]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.response }}",
        "options": {
          "responseCode": "={{ $json.httpStatus }}"
        }
      },
      "id": "send-error-response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1780, 120]
    },

    {
      "parameters": {
        "resource": "draft",
        "operation": "create",
        "subject": "={{ $json.subject }}",
        "message": "={{ $json.body }}",
        "toList": "={{ $json.to }}",
        "options": {
          "attachments": "={{ $json.attachments || [] }}"
        }
      },
      "id": "create-gmail-draft",
      "name": "Create Gmail Draft",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1780, 480],
      "credentials": {
        "gmailOAuth2": {
          "id": "gmail-oauth",
          "name": "Gmail OAuth"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetween": 2000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced error handling wrapper for Gmail API calls with retry logic awareness\n// Requirements: 8.1, 8.2, 8.3\n\n// Import retry utilities for error classification\nconst { isGmailErrorRetryable } = require('./flows/bricks/brick-retry-utils.js');\n\ntry {\n  const inputData = $input.all()[0].json;\n  const previousData = $input.all()[1]?.json || {};\n  \n  // Check if this is an error from the Gmail API node\n  if (inputData.error || (inputData.json && inputData.json.error)) {\n    const error = inputData.error || inputData.json.error;\n    \n    // Determine if this error was retryable\n    const wasRetryable = isGmailErrorRetryable(error);\n    \n    console.log('[ERROR] Gmail API call failed in create_email_draft after retries:', {\n      error: typeof error === 'object' ? error.message || JSON.stringify(error) : error,\n      wasRetryable: wasRetryable,\n      maxTriesUsed: 5, // From node configuration\n      timestamp: new Date().toISOString()\n    });\n    \n    // Determine specific error type and HTTP status\n    let errorCode = 'GMAIL_API_ERROR';\n    let httpStatus = 502;\n    let errorMessage = 'Gmail API error occurred after retries';\n    \n    if (typeof error === 'object') {\n      if (error.code) {\n        switch (error.code) {\n          case 400:\n            errorCode = 'GMAIL_BAD_REQUEST';\n            httpStatus = 400;\n            errorMessage = 'Invalid email data provided to Gmail API';\n            break;\n          case 401:\n            errorCode = 'GMAIL_AUTH_ERROR';\n            httpStatus = 502;\n            errorMessage = 'Gmail authentication failed';\n            break;\n          case 403:\n            errorCode = 'GMAIL_PERMISSION_ERROR';\n            httpStatus = 502;\n            errorMessage = 'Insufficient permissions for Gmail API';\n            break;\n          case 429:\n            errorCode = 'GMAIL_RATE_LIMITED';\n            httpStatus = 503;\n            errorMessage = 'Gmail API rate limit exceeded after retries';\n            break;\n          case 500:\n          case 502:\n          case 503:\n          case 504:\n            errorCode = 'GMAIL_SERVER_ERROR';\n            httpStatus = 502;\n            errorMessage = 'Gmail API server error persisted after retries';\n            break;\n          default:\n            errorMessage = error.message || 'Unknown Gmail API error after retries';\n        }\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n    } else if (typeof error === 'string') {\n      errorMessage = error;\n    }\n    \n    // Add retry context to error message if it was retryable\n    if (wasRetryable) {\n      errorMessage += ' (failed after exponential backoff retries)';\n    }\n    \n    // Return structured error for error handler\n    return {\n      json: {\n        brickName: 'create_email_draft',\n        error: {\n          message: errorMessage,\n          code: errorCode,\n          httpStatus: httpStatus,\n          retryAttempted: wasRetryable,\n          maxRetries: 5\n        },\n        originalInput: previousData.originalInput,\n        context: {\n          node: 'create-gmail-draft',\n          operation: 'gmail_draft_create',\n          retryLogic: 'exponential_backoff'\n        }\n      }\n    };\n  }\n  \n  // If no error, pass through the successful response\n  return {\n    json: inputData\n  };\n  \n} catch (wrapperError) {\n  console.error('[CRITICAL] Error in Gmail error wrapper:', {\n    error: wrapperError.message,\n    stack: wrapperError.stack,\n    timestamp: new Date().toISOString()\n  });\n  \n  return {\n    json: {\n      brickName: 'create_email_draft',\n      error: {\n        message: 'Critical error in Gmail API error handling',\n        code: 'GMAIL_WRAPPER_ERROR',\n        httpStatus: 500\n      },\n      originalInput: ($input.all()[1]?.json || {}).originalInput,\n      context: {\n        node: 'gmail-error-wrapper',\n        operation: 'error_handling'\n      }\n    }\n  };\n}"
      },
      "id": "gmail-error-wrapper",
      "name": "Gmail Error Wrapper",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 480]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-error",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "gmail-error-check",
      "name": "Gmail Error?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2220, 480]
    },
    {
      "parameters": {
        "jsCode": "// Format error response for Gmail API errors\nconst inputData = $input.all()[0].json;\nconst requestId = 'req_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n\nconst errorResponse = {\n  ok: false,\n  error: inputData.error?.message || 'Gmail API error occurred',\n  code: inputData.error?.code || 'GMAIL_API_ERROR',\n  brick: 'create_email_draft',\n  timestamp: new Date().toISOString(),\n  requestId: requestId\n};\n\nreturn {\n  json: {\n    response: errorResponse,\n    httpStatus: inputData.error?.httpStatus || 502\n  }\n};"
      },
      "id": "format-gmail-error-response",
      "name": "Format Gmail Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 360]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.response }}",
        "options": {
          "responseCode": "={{ $json.httpStatus }}"
        }
      },
      "id": "send-gmail-error-response",
      "name": "Send Gmail Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 360]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Gmail API response processing with comprehensive error handling\n// Requirements: 2.2, 8.1, 8.2, 12.1\n\ntry {\n  const inputData = $input.all()[0].json;\n  const previousData = $input.all()[1]?.json || {};\n  \n  // Privacy-compliant logging function\n  function logWithPrivacy(level, message, data = {}) {\n    const sanitizedData = { ...data };\n    // Mask email addresses for privacy\n    if (sanitizedData.to) {\n      sanitizedData.to = '***@***';\n    }\n    if (sanitizedData.originalInput && sanitizedData.originalInput.to) {\n      sanitizedData.originalInput = { ...sanitizedData.originalInput, to: '***@***' };\n    }\n    console.log(`[${level.toUpperCase()}] Gmail Draft Processing: ${message}`, sanitizedData);\n  }\n  \n  logWithPrivacy('info', 'Processing Gmail API response', {\n    hasError: !!inputData.error,\n    hasDraftId: !!inputData.id\n  });\n  \n  // Validate Gmail API response structure\n  if (!inputData.id) {\n    logWithPrivacy('error', 'Gmail API returned invalid response structure', {\n      responseKeys: Object.keys(inputData)\n    });\n    \n    return {\n      json: {\n        brickName: 'create_email_draft',\n        error: {\n          message: 'Gmail API returned invalid response - missing draft ID',\n          code: 'GMAIL_INVALID_RESPONSE',\n          httpStatus: 502\n        },\n        originalInput: previousData.originalInput,\n        context: {\n          node: 'process-gmail-response',\n          operation: 'response_validation'\n        }\n      }\n    };\n  }\n  \n  // Gmail API succeeded - validate draft ID format\n  const draftId = inputData.id;\n  if (typeof draftId !== 'string' || draftId.length === 0) {\n    logWithPrivacy('error', 'Gmail API returned invalid draft ID', {\n      draftIdType: typeof draftId,\n      draftIdLength: draftId ? draftId.length : 0\n    });\n    \n    return {\n      json: {\n        brickName: 'create_email_draft',\n        error: {\n          message: 'Gmail API returned invalid draft ID format',\n          code: 'GMAIL_INVALID_DRAFT_ID',\n          httpStatus: 502\n        },\n        originalInput: previousData.originalInput,\n        context: {\n          node: 'process-gmail-response',\n          operation: 'draft_id_validation'\n        }\n      }\n    };\n  }\n  \n  logWithPrivacy('info', 'Gmail draft created successfully', {\n    draftIdLength: draftId.length,\n    draftIdPrefix: draftId.substring(0, 8) + '...',\n    timestamp: new Date().toISOString()\n  });\n  \n  // Return successful response\n  return {\n    json: {\n      brickName: 'create_email_draft',\n      success: true,\n      data: {\n        draftId: draftId\n      },\n      originalInput: previousData.originalInput,\n      duration: Date.now() - (previousData.startTime || Date.now())\n    }\n  };\n  \n} catch (error) {\n  // Handle unexpected errors in response processing\n  console.error('[ERROR] Unexpected error in Gmail response processing:', {\n    error: error.message,\n    stack: error.stack,\n    timestamp: new Date().toISOString()\n  });\n  \n  return {\n    json: {\n      brickName: 'create_email_draft',\n      error: {\n        message: 'Internal error processing Gmail response',\n        code: 'INTERNAL_PROCESSING_ERROR',\n        httpStatus: 500\n      },\n      originalInput: ($input.all()[1]?.json || {}).originalInput,\n      context: {\n        node: 'process-gmail-response',\n        operation: 'response_processing'\n      }\n    }\n  };\n}"
      },
      "id": "process-gmail-response",
      "name": "Process Gmail Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 600]
    },
    {
      "parameters": {
        "jsCode": "// Format success response directly\nconst inputData = $input.all()[0].json;\nconst requestId = 'req_' + Date.now().toString(36) + '_' + Math.random().toString(36).substr(2, 9);\n\nconst successResponse = {\n  ok: true,\n  data: inputData.data,\n  brick: 'create_email_draft',\n  timestamp: new Date().toISOString(),\n  requestId: requestId\n};\n\nreturn {\n  json: {\n    response: successResponse,\n    httpStatus: 200\n  }\n};"
      },
      "id": "format-success-response",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2660, 600]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.response }}",
        "options": {
          "responseCode": "={{ $json.httpStatus }}"
        }
      },
      "id": "send-success-response",
      "name": "Send Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2880, 600]
    },
    {
      "parameters": {},
      "id": "start-node",
      "name": "When called by another workflow",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [240, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Call Auth Guard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When called by another workflow": {
      "main": [
        [
          {
            "node": "Prepare Validation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Auth Guard": {
      "main": [
        [
          {
            "node": "Prepare Validation Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Validation Data": {
      "main": [
        [
          {
            "node": "Call Validate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Validate": {
      "main": [
        [
          {
            "node": "Prepare Business Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Business Logic": {
      "main": [
        [
          {
            "node": "Validation Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Error?": {
      "main": [
        [
          {
            "node": "Format Error Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Gmail Draft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Response": {
      "main": [
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Gmail Draft": {
      "main": [
        [
          {
            "node": "Gmail Error Wrapper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Error Wrapper": {
      "main": [
        [
          {
            "node": "Gmail Error?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Error?": {
      "main": [
        [
          {
            "node": "Format Gmail Error Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Process Gmail Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Gmail Error Response": {
      "main": [
        [
          {
            "node": "Send Gmail Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Gmail Response": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Send Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}